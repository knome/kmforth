
# a b >  is  a > b
# 
:>
  `
  ; op >
  sub r14,8      ; right
  mov rax, [r14] ;
  sub r14,8      ; left
  mov rbx, [r14] ; 
  cmp rbx,rax
  jg  .more      ; signed comparison
  mov qword [r14], 0
  add r14, 8
  jmp .out
 .more:
  mov qword [r14], 1
  add r14, 8
 .out:
  `
;

# a b <  is  a < b
# 
:<
  `
  ; op <
  sub r14,8      ; right
  mov rax, [r14] ;
  sub r14,8      ; left
  mov rbx, [r14] ; 
  cmp rbx,rax
  jl  .less      ; signed comparison
  mov qword [r14], 0
  add r14, 8
  jmp .out
 .less:
  mov qword [r14], 1
  add r14, 8
 .out:
  `
;

:+
  `
  ; op +
  sub r14,8      ; right
  mov rax, [r14] ; 
  sub r14,8      ; left
  mov rbx, [r14] ;
  add rbx, rax   ;
  mov [r14],rbx  ;
  add r14,8
  `
;

:-
  `
  ; op -
  sub r14,8      ; right
  mov rax, [r14] ; 
  sub r14,8      ; left
  mov rbx, [r14] ;
  sub rbx,rax    ;
  mov [r14],rbx  ;
  add r14,8
  `
;

:/
  `
  ; op /
  sub r14,8      ; right
  mov rbx, [r14] ; 
  sub r14,8      ; left
  mov rax, [r14] ;
  mov rdx, 0     ;
  idiv rbx       ;
  mov [r14],rax  ; leaves quotient in rax, remainder in rdx
  add r14,8
  `
;

:%
  `
  ; op %
  sub r14,8      ; right
  mov rbx, [r14] ; 
  sub r14,8      ; left
  mov rax, [r14] ;
  mov rdx, 0     ;
  idiv rbx       ;
  mov [r14],rdx  ; leaves quotient in rax, remainder in rdx
  add r14,8
  `
;

:*
  `
  ; op *
  sub r14,8      ; right
  mov rbx, [r14] ; 
  sub r14,8      ; left
  mov rax, [r14] ;
  mov rdx, 0     ;
  imul rbx       ;
  mov [r14],rax  ;
  add r14,8
  `
;

:or
  `
  ; op or
  sub r14, 8     ; right
  mov rax, [r14] ;
  sub r14, 8     ; left
  mov rbx, [r14] ; 
  or rax, rbx
  mov [r14], rax ;
  add r14, 8
  `
;

:==
  `
  ; op ==
  sub r14, 8     ; right
  mov rbx, [r14] ;
  sub r14, 8     ; left
  mov rax, [r14] ; 
  sub rax, rbx
  jnz .bad
  mov qword [r14],1
  add r14,8
  jmp .done
 .bad:
  mov qword [r14],0
  add r14,8
 .done:
  `
;

# [: left right
# 
:<= { $right }
  $right.set         # [: left
  
  dup                # [: left left
  $right.get <       # [: left (left<right)
  swap $right.get == # [: (left<right) (left==right)
  or                 # [: (left<right|left==right)
;
