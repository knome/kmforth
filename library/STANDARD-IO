
# 
# simple commands interface
# 

# later we can check if the value
# is greater than 4096 or something
# and figure it's a string pointer
# if so, and otherwise assume it
# is an errno and do an appropriate
# lookup.
# 
# we might be able to introduce
# another magic local function that
# allows you to get the location of
# the calling frame, causing it to
# be passed in all secret like.
# 
# { $hello }
# 
# $hello.caller # causes a value to be pushed to stack and popped into a hidden local
#               # that will then be mov'd into the given local on command. complicates
#               # the caller a bit, and adds a bunch of little strings indicating
#               # where an error occurred, but it would be pretty useful
# 
# we could add a fn.needs_caller() to the function object to keep track of this
# 
# [: err message
# 
:or-die { $err }
  swap                   # [: message err
  dup $err.set           # [: message err
  not dup                # [: message (!err) (!err)
  [ swap pop ] $.callIf  # [: message (!err) | (!err) {called}
  $.leaveIf              # [: message | {leaves with empty stack on no error}
  
  # THERE IS AN ERROR, WE DIE HERE
  
  "FATAL-ERROR" log      # [: message
  log                    # [: 
  $err.get               # [: err
  
  # guess that any value under 1024 is an errno
  # any value over that is assumed to be a pointer to a string
  # 
  dup 1024 <             # [: err isErrno=(err<1024)
  dup                    # [: err isErrno isErrno
  
  # print the error if it is an errno
  # 
  [ { $isErrno }
    #                  # [: err isErrno
    $isErrno.set       # [: err 
    dup errno/strerror # [: err string
    log                # [: err
    $isErrno.get       # [: err isErrno
  ]                      # [: err isErrno isErrno onIsErrno
  $.callIf               # [: err isErrno {called or skipped}
  
  # print the error if it is a string
  # 
  not                    # [: err (!isErrno)
  [ dup log ]            # [: err (!isErrno) onNotErrno
  $.callIf               # [: err | err {we dup to keep the stack the same either way}
  
  pop # we could not dup and let the stack be inconsistent when we panic, but no
  
  "" panic
;

# [: filename
# [: fd err
# 
:create-new-file
  syscall/open/opt/readwrite syscall/open/opt/create or
  syscall/open/opt/exclusive or
  syscall/open/mode/standard-file
  syscall/open
;

# [: filename
# [: fd err
# 
:create-new-private-file
  syscall/open/opt/readwrite syscall/open/opt/create or
  syscall/open/opt/exclusive or
  syscall/open/mode/owner/readwrite
  syscall/open
;

# [: filename
# [: fd err
# 
:open-existing-file
  syscall/open/opt/readwrite
  syscall/open/mode/standard-file
  syscall/open
;

# [: fd
# [: err
# 
:close
  syscall/close
  swap pop
;

# [: "string"
# [: err
# 
:write
  syscall/STDOUT -write-all
;

:print
       syscall/STDOUT -write-all dup $.leaveIf pop
  "\n" syscall/STDOUT -write-all
;  

# [: "string" fd
# [: err
# 
:-write-all { $fd $len $string  $thus $retry }
  $fd.set
  dup string/length        # [: string string-length
  $len.set                 # [: string
  $string.set              # [:
  0 $thus.set              # [:
  
  $retry.here              # [:
  
  $string.get              # [: string
  $len.get $thus.get -     # [: string remaining
  $fd.get                  # [: string remaining fd
  syscall/write            # [: amount err
  
  dup                      # [: amount err err
  [                        # [: amount err err [on-err]
    swap     # [: err amount
    pop      # [: err
    dup      # [: err err (so we return 'err' on $.leaveIf)
  ]
  $.callIf                 # [: amount err=0 | err err
  $.leaveIf                # [: amount | err (leave)
  
  $thus.get +              # [: (amount+thus)
  dup $thus.set            # [: (amount+thus)
  
  $len.get swap -          # [: (len-(amount+thus))
  $retry.get               # [: (len-(amount+thus)) retry-addr
  $.jumpIf                 # [: 
  
  0                        # [: 0
;

# panics on log write error
# 
# [: "string"
# [:
# 
:log
       syscall/STDERR -write-all [ 203 syscall/exit ] $.callIf
  "\n" syscall/STDERR -write-all [ 204 syscall/exit ] $.callIf
;

# does not return
# 
# [: "string"
# n/a
# 
:panic 
  log
  syscall/STDERR syscall/exit
;

# does not return
# 
# [: exitcode
# n/a
# 
:exit
  syscall/SYSCALL-EXIT syscall/one
  "implementation error - exit failed?" log
  [] loop
;

# output ordering is FIFO, not stack-backwards
# [: "hello" ", " "there" 3 write-strings --> "hello, there"
# 
# [: string... numstrings
# [: err
:write-strings
  dup 0 ==                     #[: n=0 1 | ss=string... n=1+ 0
  $.leaveIf                    #[: <> 0 | string... n
  
  dup syscall/iovec.size *     #[: string... n <required-iovec-array-size>
  
  [ 
     { $iovecs $s $n $cur $total $loop $inner }
     
     #                                ###[: string... n iovecs=<iovec-array-buffer>
     $iovecs.set                      ###[: ss... n
     $n.set                           ###[: ss...
     
     0 $total.set
     
     syscall/iovec.size $n.get *      ###[: ss... <offset to one after last iovec>
     $iovecs.get +                    ###[: ss... <pointer to one after last iovec>
     $cur.set                         ###[: ss...
     
     $loop.here
     
     $s.set                           ###[: ss? s # we only enter the loop when (ss.count>0)
     
     $cur.get syscall/iovec.size -    ###[: ss... (cur-sizeof(iovec))
     dup $cur.set                     ###[: ss... cur
     
     $s.get                           ###[: ss? cur s
     
     syscall/iovec//base.set          ###[: ss? 
     $cur.get $s.get string/length    ###[: ss? cur <s-length>
     dup $total.get + $total.set      ###[: ss? cur <s-length>
     syscall/iovec//len.set           ###[: ss?
     
     $cur.get $iovecs.get !=          ###[: ss? <next-is-not-start>
     $loop.get $.jumpIf               ###[: - # if this don't jump, the stack is empty
     
     # we have a full iovec now
     # time to start writing it out
     
     # next is pointing at the first item right now
     
     $loop.here
     
     # print some
     
     syscall/STDOUT $iovecs.get $n.get ###[: stdout iovecs num-iovecs
     syscall/writev                    ###[: written? err?
     
     # check for any write errors
     
     dup                              ###[: written? err? err?
     [ swap pop 1 ] $.callIf          ###[: err 1 | written 0
     $.leaveIf                        ###[: <> err | written
     
     # update the total remaining to account for the portion written
     
     dup $total.get swap - $total.set ###[: written
     
     # check if we're done
     # (no need to waste time on iovec if we wrote everything)
     
     $total.get 0 == dup              ###[: written (total==0?) (total==0?)
     [ pop pop 0 1 ] $.callIf         ###[: written 0 1 | written (total!=0)
     $.leaveIf                        ###[: <> 0 | written
     
     # update iovec with write
     
     $inner.here
     
     $cur.get swap dup $cur.get        ###[: cur written written cur
     syscall/iovec//len.get >=         ###[: cur written (written>=cur.len)
     [
         # written is >=
         #                              #####[: cur written
         1 nth                          #####[: cur written cur
         syscall/iovec//len.get         #####[: cur written (cur.len)
         -                              #####[: cur remaining=(written-cur.len)
         1 nth 0 syscall/iovec//len.set #####[: cur remaining
         swap                           #####[: remaining cur
         syscall/iovec.size + swap      #####[: (cur+sizeof(iovec)) (written-cur.len)
         1 swap                         #####[: (cur+sizeof(iovec)) (changed-cur) (written-cur.len)
     ]
     [
         { $nn }
         # written is <
         #                              #####[: cur written
         1 nth $nn.set                  #####[: cur written
         $nn.get syscall/iovec//len.get #####[: cur written (cur.len)
         swap -                         #####[: cur (cur.len-written)
         $nn.get swap                   #####[: cur cur (cur.len-written)
         syscall/iovec//len.set         #####[: cur
         0 0                            #####[: cur 0=changed-cur 0=remaining
     ]
     if                                ###[: cur! changed-cur remaining  # the ! to signify potential modification
     
     # repeat if there is still written characters to account for
     
     dup dup                           ###[: cur! changed-cur remaining remaining remaining
     [ pop swap pop ] $.callIf         ###[: cur! remaining | cur! changed-cur remaining remaining
     $inner.get $.jumpIf               ###[: cur! remaining | cur! changed-cur remaining
     
     pop                               ###[: cur! changed-cur
     
     # update count of remaining iovecs if cur changed
     
     $n.get swap - $n.set              ###[: cur!
     
     $cur.set                          ###[:
     
     $loop.get
     $.jump
  ]                            #[: string... n <required-iovec-array-size> <todo>
  
  swap                         #[: string... n <todo> <required-iovec-array-size>
  stack/call-with-stack-buffer #[: 0 | err
;
