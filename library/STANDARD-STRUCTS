
# we might alter this in the future so that the caller defines a macro that accepts a macro to expand
# in order to define the fields, and then calls the defining macro using the name of their field macro.
# the advantage here is that field values would then be generally available as injectable values rather
# than only existing in the expansion of a single macro, which will allow us to arbitrarily manipulate
# them and recursively expand fields.
# 
# % my/type (%m %s)
#   @ %m %s my/type ((field definitions) (go here)) ;
# ;
# 
# @ struct/define my/type ;
# 
# :main my/type//go//subfield//othersubfield.set
# 
# or something like that

#####

:type/u8.size 1             ;
:type/u8.set  memory/poke-b ;
:type/u8.get  memory/peek-b ;

:type/u16.size 2             ;
:type/u16.set  memory/poke-w ;
:type/u16.get  memory/peek-w ;

:type/u32.size 4 ;
:type/u32.set  memory/poke-d ;
:type/u32.get  memory/peek-d ;

:type/u64.size 8 ;
:type/u64.set  memory/poke-q ;
:type/u64.get  memory/peek-q ;

:type/pointer.size type/u64.size ;
:type/pointer.set  type/u64.set  ;
:type/pointer.get  type/u64.get  ;

# user defines a macro of form % name (@rc @st) @ @rc @st ( (field type) (field type) (field type count) ...etc... )
# they then call @ struct/define name ; # (rc=recursive-call st=state)
# our macro then calls their macro with its internal bits ready to go
# they could just call it directly, but making them use a macro will let me create recursive structure definitions eventually
# 
% struct/define (@definition)
  @ @definition struct/-with-definition @definition ;
;

# annotate the (name type) and (name type reps) items as (@fn @ft @is-array @items)
# annotate the 2 items ones as (@fn @ft 0 1) # 1 because we use reps*size in the field-addr calculations
# then expand the .set/etc functions for 1 and the .nth.set/etc functions for otherwise
# 
% struct/-with-definition ( @name @fields )
  @ struct/-define
      @name
      (
          @(
              (@fields)
              (@f.each)
              @(
                  (@f)
                  (@fc.count)
                  @(
                      ((@fc 2) @f)
                      (@e.ifEqual (@fn @ft))
                      (@fn @ft 0 1)
                  )
                  @(
                      ((@fc 3) @f)
                      (@e.ifEqual (@fn @ft @fr))
                      (@fn @ft 1 @fr)
                  )
              )
          )
      )
  ;
;

% struct/-define (@name @fields)
  @ struct/-with-mapping-window struct/-define-field-accessors @name @fields ;
  
  # struct-level functions
  
  : @name.size 0 @( (@fields) (@f.each) @( (@f) ((@fn @ft @fa @fr)) @ft.size @fr * + ) ) ;
;

% struct/-define-field-accessors ( @name @before (@fieldName @fieldType @fieldIsArray @fieldRepetitions) @after )
  @ struct/-define-array-accessors  @name @before @fieldName @fieldType @fieldIsArray @fieldRepetitions @after ;
  @ struct/-define-scalar-accessors @name @before @fieldName @fieldType @fieldIsArray @fieldRepetitions @after ;
  
  # common accessors
  
  # [: structaddr
  # [: fieldaddr
  # 
  : @name//@fieldName.addr
    0 @( (@before) (@b.each) @( (@b) ((@fn @ft @fa @fr)) @ft.size @fr * + ) ) +
  ;
;  

% struct/-define-array-accessors (@name @before @fieldName @fieldType @fieldIsArray.expandIf @fieldRepetitions @after)
  
  # [:
  # [: <number-of-entries>
  # 
  : @name//@fieldName.entries
    @fieldRepetitions
  ;
  
  # [:
  # [: <last-index>
  : @name//@fieldName.last-index
    @fieldRepetitions 1 -
  ;
  
  # [: structaddr index
  # [: &fieldValue[ index ]
  # 
  : @name//@fieldName.nth.addr { $index }
    $index.set                     # [: structaddr
    @name//@fieldName.addr         # [: fieldaddr
    $index.get @fieldType.size * + # [: &fieldaddr[ index ]
  ;
  
  # [: structaddr index
  # [: fieldValue
  # 
  : @name//@fieldName.nth.get
    @name//@fieldName.nth.addr # [: &fieldaddr[ index ]
    @fieldType.get             # [: value
  ;
  
  # [: structaddr index newValue
  # [: 
  # 
  : @name//@fieldName.nth.set { $value }
    $value.set                 # [: structaddr index
    @name//@fieldName.nth.addr # [: &fieldaddr[ index ]
    $value.get                 # [: &fieldaddr[ index ] value
    @fieldType.set             # [:
  ;
;

% struct/-define-scalar-accessors (@name @before @fieldName @fieldType @fieldIsArray.expandIfNot @fieldRepetitions @after)
  
  # [: 
  # [: size
  # 
  : @name//@fieldName.size
    @fieldType.size
  ;
  
  # [: structaddr
  # [: fieldvalue
  # 
  : @name//@fieldName.get
    @name//@fieldName.addr
    @fieldType.get
  ;
  
  # [: structaddr value
  # [: 
  # 
  : @name//@fieldName.set { $value }
    $value.set
    @name//@fieldName.addr
    $value.get
    @fieldType.set
  ;
  
  # [: structaddr
  # [: 
  : @name//@fieldName.incr { $fieldAddr }
    @name//@fieldName.addr
    $fieldAddr.set
    $fieldAddr.get @fieldType.get
    1 +
    $fieldAddr.get swap @fieldType.set
  ;
  
  # [: structaddr
  # [: 
  : @name//@fieldName.decr { $fieldAddr }
    @name//@fieldName.addr
    $fieldAddr.set
    $fieldAddr.get @fieldType.get
    1 -
    $fieldAddr.get swap @fieldType.set
  ;

;

# for
#   @ hello (some state) (1 2 3 4 5)
# expandsTo
#   @ hello (some state) ()        1 (2 3 4 5)
#   @ hello (some state) (1)       2 (3 4 5)
#   @ hello (some state) (1 2)     3 (4 5)
#   @ hello (some state) (1 2 3)   4 (5)
#   @ hello (some state) (1 2 3 4) 5 ()
# 
% struct/-with-mapping-window (@todo @state @list)
  @ struct/-with-mapping-window/ready @todo @state () @list ;
;

# % with-mapping-window/ready (hello state (a b c) (d e f))
#   @ hello state (a b c) d (e f) ;
#   @ struct/-with-mapping-window/ready hello state (a b c d) (e f)
# ;
# 
% struct/-with-mapping-window/ready (@todo @state @prev @remaining.ifNotEmpty)
  @ @todo @state @prev @( (@remaining) (@rf.first) @rf) @( (@remaining) (@rr.rest) @rr ) ;
  @ struct/-with-mapping-window/ready
    @todo
    @state
    ( @( (@prev) (@p.each) @p ) @( (@remaining) (@rf.first) @rf ) ) 
    @( (@remaining) (@rr.rest) @rr )
  ;
;
