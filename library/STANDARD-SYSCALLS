
# The kernel interface uses %rdi, %rsi, %rdx, %r10, %r8 and %r9.

:syscall/SYSCALL-OPEN    2 ;
:syscall/SYSCALL-CLOSE   3 ;
:syscall/SYSCALL-MMAP    9 ;
:syscall/SYSCALL-SOCKET 41 ;
:syscall/SYSCALL-BIND   49 ;
:syscall/SYSCALL-EXIT   60 ;

# [: <rdi> <syscall-no>
# [: <rax> 0 | 0 <err>
:syscall/one
  `
  sub r14,8
  mov rax,[r14]
  sub r14,8
  mov rdi,[r14]
  syscall
  
  mov [r14],rax
  add r14,8
  
  test rax,rax
  jns .success ;
  
  neg rax
  mov qword [r14],0
  add r14,8
  mov [r14], rax
  add r14,8
  jmp .done
  
  .success:
  mov [r14],rax
  add r14,8
  mov qword [r14],0
  add r14,8
  
  .done:
  `
;

# [: <rdi> <rsi> <rdx> <syscall-no>
# [: <rax> 0 | 0 <err>
:syscall/three
  `
  sub r14,8
  mov rax,[r14]
  sub r14,8
  mov rdx,[r14]
  sub r14,8
  mov rsi,[r14]
  sub r14,8
  mov rdi,[r14]
  syscall
  
  mov [r14],rax
  add r14,8
  
  test rax,rax
  jns .success ;
  
  neg rax
  mov qword [r14],0
  add r14,8
  mov [r14], rax
  add r14,8
  jmp .done
  
  .success:
  mov [r14],rax
  add r14,8
  mov qword [r14],0
  add r14,8
  
  .done:
  `
;

# [: <rdi> <rsi> <rdx> <r10> <r8> <r9> <syscall-no>
# [: <rax> 0 | 0 <err>
:syscall/six
  `
  sub r14,8
  mov rax,[r14]
  
  sub r14,8
  mov r9,[r14]
  sub r14,8
  mov r8,[r14]
  sub r14,8
  mov r10,[r14]
  sub r14,8
  mov rdx,[r14]
  sub r14,8
  mov rsi,[r14]
  sub r14,8
  mov rdi,[r14]
  
  syscall
  
  mov [r14],rax
  add r14,8
  
  test rax,rax
  jns .success ;
  
  neg rax
  mov qword [r14],0
  add r14,8
  mov [r14], rax
  add r14,8
  jmp .done
  
  .success:
  mov [r14],rax
  add r14,8
  mov qword [r14],0
  add r14,8
  
  .done:
  `
;

# PROT_NONE            0x0
# PROT_READ            0x1
# PROT_WRITE           0x2
# PROT_EXEC            0x4
# PROT_GROWSDOWN 0x1000000

# MAP_SHARED          0x01
# MAP_PRIVATE         0x02
# MAP_SHARED_VALIDATE 0x03 # don't use
# MAP_TYPE            0x0f # don't use

# MAP_FIXED     0x10 # ( replace mappings, map to specific location? )
# MAP_ANONYMOUS 0x20 # no file required

# code that is machine specific.
# not that I'm making this portable.
# just because.

# [: string length fd
# [: written err
# 
:syscall/write
  `
  sub r14, 8     ; pop fd into rdi
  mov rdi, [r14] ;
  sub r14, 8     ; pop string length into rdx
  mov rdx, [r14] ;
  sub r14, 8     ; pop string pointer into rsi
  mov rsi, [r14] ; 
  mov rax, 1     ; write syscall
  syscall
  
  test rax,rax
  jns .wrote     ; jump to good if not signed ( negative = error )
  
  ; on error, we negate (turn positive) and return the error code
  mov qword [r14],0
  add r14,8
  neg rax
  mov qword [r14],rax
  add r14,8
  jmp .leave
  
 .wrote:
  mov [r14],rax
  add r14,8
  mov qword [r14],0
  add r14,8
  
 .leave:
  `
;

:syscall/exit
  syscall/SYSCALL-EXIT
  syscall/one
;

# for desired-address
:syscall/mmap/place-anywhere 0 ;

:syscall/mmap/no-fd -1 ;

:syscall/mmap/no-offset 0 ;

:syscall/mmap/prot-none             0x0 ;
:syscall/mmap/prot-read             0x1 ;
:syscall/mmap/prot-write            0x2 ;
:syscall/mmap/prot-exec             0x4 ;
:syscall/mmap/prot-grows-down 0x1000000 ;

:syscall/mmap/map-shared     0x1 ;
:syscall/mmap/map-private    0x2 ;
:syscall/mmap/map-anonymous 0x20 ;

# [: openfd protection-bits flags desired-address file-offset mapping-size
# [: region-addr err
# 
:syscall/mmap { $fd $prot $flags $addr $offset $size }
  $size.set
  $offset.set
  $addr.set
  $flags.set
  $prot.set
  $fd.set
  
  $addr.get
  $size.get
  $prot.get
  $flags.get
  $fd.get
  $offset.get
  syscall/SYSCALL-MMAP
  syscall/six
;

:syscall/open/opt/accmode    0x00000003 ;
:syscall/open/opt/readonly   0x00000000 ; # open the file for reading only
:syscall/open/opt/writeonly  0x00000001 ; #  "            for writing only
:syscall/open/opt/readwrite  0x00000002 ; #  "            for reading and writing
:syscall/open/opt/append     0x00000400 ; # make writing to the given file append only
:syscall/open/opt/cloexec    0x00080000 ; # mark the returned file descriptor to be closed during exec
:syscall/open/opt/create     0x00000040 ; # create the file if it does not exist
:syscall/open/opt/direct     0x00004000 ; # avoid the file cache. generally hurts performance, useful for some databases
:syscall/open/opt/directory  0x00010000 ; # make open fail if target is not directory
:syscall/open/opt/dsync      0x00001000 ; # forces writes to fsync down before command returns
:syscall/open/opt/exclusive  0x00000080 ; # exclusive, if creat, don't open existing file. sans creat, fail if block device in use.
:syscall/open/opt/largefile  0x00008000 ; # allow use of 64bit offsets on 32bit systems
:syscall/open/opt/noatime    0x00040000 ; # do not update the access time of the file when opening it
:syscall/open/opt/noctty     0x00000100 ; # (no current tty?) if opening a tty, don't associate it with the process
:syscall/open/opt/nofollow   0x00020000 ; # do not follow symbolic links
:syscall/open/opt/nonblock   0x00000800 ; # mark fd to return if not ready for pipes, does not affect block devices or regular files
:syscall/open/opt/path       0x00200000 ; # get an fd to the path, not file. file manipulating calls will fail. metadata & location.
:syscall/open/opt/sync       0x00101000 ; # like DSYNC, but for metadata instead of file data
:syscall/open/opt/tmpfile    0x00410000 ; # creates a nameless inode in a directory to use as a tmp ( avoids the name/delete dance )
:syscall/open/opt/truncate   0x00000200 ; # on opening, set the file size to 0, erasing all current contents

:syscall/open/mode/owner/read      0o400 ;
:syscall/open/mode/owner/write     0o200 ;
:syscall/open/mode/owner/readwrite 0o600 ;
:syscall/open/mode/owner/execute   0o100 ;
:syscall/open/mode/owner/all       0o700 ;
:syscall/open/mode/group/read      0o040 ;
:syscall/open/mode/group/write     0o020 ;
:syscall/open/mode/group/readwrite 0o060 ;
:syscall/open/mode/group/execute   0o010 ;
:syscall/open/mode/group/all       0o070 ;
:syscall/open/mode/other/read      0o004 ;
:syscall/open/mode/other/write     0o002 ;
:syscall/open/mode/other/readwrite 0o006 ;
:syscall/open/mode/other/execute   0o001 ;
:syscall/open/mode/other/all       0o007 ;

:syscall/open/mode/standard-file  0o644 ; # owner read/write, group and others read
:syscall/open/mode/standard-dir   0o755 ; # owner can read/write/list, group and others read/list

# [: cstr/path flags mode
# [: fd err
# 
:syscall/open
  syscall/SYSCALL-OPEN
  syscall/three
;

# [: fd
# [: 
# 
:syscall/close
  syscall/SYSCALL-CLOSE
  syscall/one
  # do not retry on EINTR as it still closes the fd
  # it just had some other interuption we can no longer safely handle
;

:syscall/socket/ipproto-tcp 6 ;
:syscall/socket/sock-stream 1 ;
:syscall/socket/pf-inet 2 ;

% syscall/socket/create-socket-structure (@rc @st)
  @ @rc @st (
    (domain   type/u8)
    (type     type/u8)
    (protocol type/u8)
  );
;

@ struct/define syscall/socket/create-socket-structure ;

# [: protocol-family socket-type protocol
# [: <fd> 0 | 0 <err>
:syscall/socket { $data }
  syscall/SYSCALL-SOCKET
  syscall/three
;

:syscall/bind/af-unspecified 0 ;
:syscall/bind/af-unix        1 ; # unix socket
:syscall/bind/af-inet        2 ; # ipv4
:syscall/bind/af-ax25        3 ; # amatuer radio ax.25
:syscall/bind/af-ipx         4 ; # novell ipx
:syscall/bind/af-appletalk   5 ; # appletalk ddp
:syscall/bind/af-netrom      6 ; # amatuer radio netrom
:syscall/bind/af-bridge      7 ; # multiprotocol bridge
:syscall/bind/af-aal5        8 ; # reserved for werner atm
:syscall/bind/af-x25         9 ; # reserved for x.25 project
:syscall/bind/af-inet6      10 ; # ipv6
:syscall/bind/af-max        12 ; # 

% syscall/bind/sockaddr-storage (@rc @st)
  @ @rc @st (
    (sin-family type/u16)
  );
;
@ struct/define syscall/bind/sockaddr-storage ;

% syscall/bind/sockaddr-in4 (@rc @st)
  @ @rc @st (
    (sin-family type/u16)
    (sin-port   type/u16)
    (sin-addr   type/u32)
    (-unused-   type/u64)
  );
;
@ struct/define syscall/bind/sockaddr-in4 ;

% syscall/bind/sockaddr-in6 (@rc @st)
  @ @rc @st (
    (sin-family type/u16)
    (sin-port   type/u16)
    # unimplemented ipv6 shit
  );
;

# [: fd sockaddr-pointer server-address-size
# [: 0 | err
:syscall/bind
  syscall/SYSCALL-BIND
  syscall/three
;
