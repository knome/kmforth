
# NEVER DEFINE THESE
# USE BIGGER-SMALLER FOR UNSIGNED
# USE GREATER-LESSER FOR SIGNED

# < > <= >=

:neg ` neg qword [r14-8] ` ;

# a b is-greater-than ( signed a > b )
# 
:is-greater-than
  `
  impl: kmforth/python
  type: token-replace
  name: is-greater-than
  when: I,I
  
  (lambda a, b:
      [Token(
          location = self.location(),
          kind     = 'integer',
          value    = (
              1 if a.value() > b.value() else 0
          )
      )]
  )
  
  =====
  impl: kmforth/python
  name: is-greater-than
  type: code
  
  ; op is-greater (signed)
  sub r14,8      ; right
  mov rax, [r14] ;
  sub r14,8      ; left
  mov rbx, [r14] ; 
  cmp rbx,rax
  jg  .more      ; signed comparison
  mov qword [r14], 0
  add r14, 8
  jmp .out
 .more:
  mov qword [r14], 1
  add r14, 8
 .out:
  `
;

# a b is-bigger-than ( unsigned a > b )
# 
:is-bigger-than
  `
  impl: kmforth/python
  type: token-replace
  name: is-bigger-than
  when: I,I
  
  (lambda a, b:
      [Token(
          location = self.location(),
          kind     = 'integer',
          value    = (
              1 if a.value() > b.value() else 0
          )
      )]
  )
  
  =====
  impl: kmforth/python
  name: is-bigger-than
  type: code
  
  ; op is-bigger-than (unsigned)
  sub r14,8      ; right
  mov rax, [r14] ;
  sub r14,8      ; left
  mov rbx, [r14] ; 
  cmp rbx,rax
  ja  .more      ; unsigned comparison
  mov qword [r14], 0
  add r14, 8
  jmp .out
 .more:
  mov qword [r14], 1
  add r14, 8
 .out:
  `
;

:is-lesser-than
  `
  impl: kmforth/python
  type: token-replace
  name: is-lesser-than
  when: I,I
  
  (lambda a, b:
      [Token(
          location = self.location(),
          kind     = 'integer',
          value    = (
              1 if a.value() < b.value() else 0
          )
      )]
  )

  ===

  ; op is-lesser-than (signed)
  sub r14,8      ; right
  mov rax, [r14] ;
  sub r14,8      ; left
  mov rbx, [r14] ; 
  cmp rbx,rax
  jl  .less      ; signed comparison
  mov qword [r14], 0
  add r14, 8
  jmp .out
 .less:
  mov qword [r14], 1
  add r14, 8
 .out:
  `
;

:is-smaller-than
  `
  impl: kmforth/python
  type: token-replace
  name: is-smaller-than
  when: I,I
  
  (lambda a, b:
      [Token(
          location = self.location(),
          kind     = 'integer',
          value    = (
              1 if a.value() < b.value() else 0
          )
      )]
  )

  ===

  ; op is-smaller-than (unsigned comparison)
  sub r14,8      ; right
  mov rax, [r14] ;
  sub r14,8      ; left
  mov rbx, [r14] ; 
  cmp rbx,rax
  jb  .less      ; unsigned comparison
  mov qword [r14], 0
  add r14, 8
  jmp .out
 .less:
  mov qword [r14], 1
  add r14, 8
 .out:
  `
;

:is-greater-than-or-equal-to is-lesser-than  not ;
:is-bigger-than-or-equal-to  is-smaller-than not ;
:is-lesser-than-or-equal-to  is-greater-than not ;
:is-smaller-than-or-equal-to is-bigger-than  not ;

:+
  `
  impl: kmforth/python
  type: token-replace
  name: +
  when: I,I
  
  (lambda a, b:
      [Token(
          location = self.location(),
          kind     = 'integer',
          value    = (
              a.value() + b.value()
          )
      )]
  )

  ===
  
  ; op +
  sub r14,8      ; right
  mov rax, [r14] ; 
  sub r14,8      ; left
  mov rbx, [r14] ;
  add rbx, rax   ;
  mov [r14],rbx  ;
  add r14,8
  `
;

:-
  `
  impl: kmforth/python
  type: token-replace
  name: -
  when: I,I
  
  (lambda a, b:
      [Token(
          location = self.location(),
          kind     = 'integer',
          value    = (
              a.value() - b.value()
          )
      )]
  )

  ===
  
  ; op -
  sub r14,8      ; right
  mov rax, [r14] ; 
  sub r14,8      ; left
  mov rbx, [r14] ;
  sub rbx,rax    ;
  mov [r14],rbx  ;
  add r14,8
  `
;

:/
  `
  impl: kmforth/python
  type: token-replace
  name: /
  when: I,I
  
  (lambda a, b:
      [Token(
          location = self.location(),
          kind     = 'integer',
          value    = (
              a.value() // b.value()
          )
      )]
  )

  ===
  
  ; op /
  sub r14,8      ; right
  mov rbx, [r14] ; 
  sub r14,8      ; left
  mov rax, [r14] ;
  mov rdx, 0     ;
  idiv rbx       ;
  mov [r14],rax  ; leaves quotient in rax, remainder in rdx
  add r14,8
  `
;

:%
  `
  impl: kmforth/python
  type: token-replace
  name: %
  when: I,I
  
  (lambda a, b:
      [Token(
          location = self.location(),
          kind     = 'integer',
          value    = (
              a.value() % b.value()
          )
      )]
  )

  ===
  
  ; op %
  sub r14,8      ; right
  mov rbx, [r14] ; 
  sub r14,8      ; left
  mov rax, [r14] ;
  mov rdx, 0     ;
  idiv rbx       ;
  mov [r14],rdx  ; leaves quotient in rax, remainder in rdx
  add r14,8
  `
;

:*
  `
  impl: kmforth/python
  type: token-replace
  name: *
  when: I,I
  
  (lambda a, b:
      [Token(
          location = self.location(),
          kind     = 'integer',
          value    = (
              a.value() * b.value()
          )
      )]
  )

  ===
  
  ; op *
  sub r14,8      ; right
  mov rbx, [r14] ; 
  sub r14,8      ; left
  mov rax, [r14] ;
  mov rdx, 0     ;
  imul rbx       ;
  mov [r14],rax  ;
  add r14,8
  `
;

:or
  `
  impl: kmforth/python
  type: token-replace
  name: or
  when: I,I
  
  (lambda a, b:
      [Token(
          location = self.location(),
          kind     = 'integer',
          value    = (
              a.value() | b.value()
          )
      )]
  )

  ===
  
  ; op or
  sub r14, 8     ; right
  mov rax, [r14] ;
  sub r14, 8     ; left
  mov rbx, [r14] ; 
  or rax, rbx
  mov [r14], rax ;
  add r14, 8
  `
;

:and
  `
  impl: kmforth/python
  type: token-replace
  name: and
  when: I,I
  
  (lambda a, b:
      [Token(
          location = self.location(),
          kind     = 'integer',
          value    = (
              a.value() & b.value()
          )
      )]
  )

  ===
  
  ; op and
  sub r14,8     ; right
  mov rax,[r14]
  sub r14,8     ; left
  mov rbx,[r14]
  and rax,rbx
  mov [r14],rax
  add r14,8
  `
;

:==
  `
  impl: kmforth/python
  type: token-replace
  name: ==
  when: I,I
  
  (lambda a, b:
      [Token(
          location = self.location(),
          kind     = 'integer',
          value    = (
              1 if a.value() == b.value() else 0
          )
      )]
  )

  ===
  
  ; op ==
  sub r14, 8     ; right
  mov rbx, [r14] ;
  sub r14, 8     ; left
  mov rax, [r14] ; 
  sub rax, rbx
  jnz .bad
  mov qword [r14],1
  add r14,8
  jmp .done
 .bad:
  mov qword [r14],0
  add r14,8
 .done:
  `
;

:!= == not ;

# left-shift
# 
# [: value shiftAmount
# 
:<<
  [ 2 * ] repeat
;

# right-shift
# 
# [: value shiftAmount
# 
:>>
  [ 2 / ] repeat
;
