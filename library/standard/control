
:loop { $todo $loop }
  $todo.set
  $loop.here
  $todo.get
  call
  $loop.jump
;

# [: cond todo
# 
:while { $test $todo $retry $condRet }
  $todo.set    # pop stack into todo local
  $test.set    # pop stack into test local
  
  $retry.here  # push address following command into local
  
  $test.get    # push and call the cond func
  call
  
  dup          # dups its return value
  $condRet.set # pop the copy into condret
  
  $todo.get    # push the todo and call it if return was truthy
  $.callIf     # ( consumes ret and leave datastack clean for called function )
  
  $condRet.get  # push the return value back onto the stack
  $retry.jumpIf # pops cond, jumps to the address in retry if condret was true
  
  # otherwise we end up here with a clean datastack ( excepting what cond/todo may have pushed
  # we can just ignore callstack locals and just walk back past them
  # done
;

# [: times todo
:repeat { $times $todo $loop }
  $times.set  # [: todo
  $todo.set   # [: 
  $loop.here  # [: 
  
  $times.get  # [: times
  dup         # [: times times
  decr        # [: times (times-1)
  $times.set  # [: times
  not         # [: !times
  $.leaveIf   # [: 
  
  $todo.get   # [: todo
  call        # [: 
  
  $loop.jump  # [:
;

# [: cond onIf onElse
# [: 
:if { $cond $onIf $onElse }
  
  # clear the stack of cond and branches
  # 
  $onElse.set # [: cond onIf
  $onIf.set   # [: cond
  $cond.set   # [: 
  
  # call onIf if the condition was truthy
  # 
  $cond.get $onIf.get $.callIf $cond.get $.leaveIf
  
  # otherwise call the default else branch
  # 
  $onElse.get call
;

# [: cond todo 
# [:
:when
  $.callIf
;
