
# let's explore some manually defined generics

% ~cursor/Cursor (@rc @st)
  @ @rc @st (
    (definition type/u64)
  );
;

@ struct/define ~cursor/Cursor ;

% ~cursor/CursorDefinition (@rc @st)
  @ @rc @st (
    (read  type/pointer) # amount buffer cursor -> err
    (write type/pointer) # amount buffer cursor -> err
    (tell  type/pointer) # cursor -> position err
    (seek  type/pointer) # signed-offset cursor -> err
    (start type/pointer) # cursor -> err
    (end   type/pointer) # cursor -> err
    (close type/pointer) # cursor
  );
;

@ struct/define ~cursor/CursorDefinition ;

# todo
# (blank-definition todo)
:~cursor/with-definition 
  { -- $todo } $todo.set
  ~cursor/CursorDefinition.size
  [
    { -- $cursor } $cursor.set
    ~cursor/CursorDefinition.size 0 $cursor.get memory/memset
    $cursor.get $todo.call
  ]
  stack/with-stack-buffer
;

# base common functions

# amount raw-buffer cursor -> (amount raw-buffer cursor definition-call) -> amount-read err
: ~cursor/read dup ~cursor/Cursor//definition.get ~cursor/CursorDefinition//read.call ;

# amount raw-buffer cursor -> amount-written err
: ~cursor/write dup ~cursor/Cursor//definition.get ~cursor/CursorDefinition//write.call ;

: ~cursor/read-all "unimplemented" panic ;

# amount raw-buffer cursor -> amount-read err
: ~cursor/write-all
  { -- $cursor $raw-buffer $amount $remaining }
  
  $cursor.set
  $raw-buffer.set
  $amount.set
  
  $amount.get $remaining.set
  
  [ { -- $escape } $escape.set
    [ $remaining.get 0 is-bigger-than ]
    [
      $remaining.get $raw-buffer.get $cursor.get dup ~cursor/Cursor//definition.get ~cursor/CursorDefinition//write.call
      
      # on error
      # 
      dup
      [
        $escape.call
      ]
      when
      pop
      
      # on 0 write (no error + 0 write = space is full)
      # 
      dup 0 ==
      [
        pop
        0 "cursor lacks sufficient space for full write"
        $escape.call
      ]
      when
      
      dup
      [-] $remaining.update
      [+] $raw-buffer.update
    ]
    while
    
    $amount.get 0
  ]
  stack/with-escape
;

# amount receiving-cursor cursor -> amount-transferred err
: ~cursor/read-into-cursor
  { -- $cursor $receiving-cursor $amount }
  
  $cursor.set
  $receiving-cursor.set
  $amount.set
  
  $amount.get 0 ==
  [
    0 0
  ]
  [ { -- $written }
    0 $written.set
    
    [ { -- $escape } $escape.set
      $amount.get
      [ { -- $buffer $p $remaining }
        
        $buffer.set
        $buffer.get $p.set
        
        [ { -- $read-escape } $read-escape.set
          [ $written.get $amount.get is-smaller-than ]
          [
            $amount.get $written.get - $p.get $cursor.get ~cursor/read  #[: amount-read err
            dup
            [
              # there was an error, jump out and return it
              $escape.call
            ]
            [
              # we successfully wrote some amount, pop the error out of the way and record it
              pop dup 0 ==
              [
                # if we read 0 without error, we assume the source has run out of data to read
                pop $read-escape.call
              ]
              [
                dup
                [+] $written.update
                [+] $p.update
              ]
              if
            ]
            if
          ]
          while
        ]
        stack/with-escape
        
        $buffer.get $p.set
        
        [ $amount.get 0 is-bigger-than ]
        [
          $amount.get $p.get $receiving-cursor.get ~cursor/write #[: amount-written err
          dup
          [
            # there was an error, jump out and return it
            $escape.call
          ]
          [
            pop dup
            [-] $amount.update
            [+] $p.update
          ]
          if
        ]
        while
      ]
      stack/with-stack-buffer
      
      $written.get 0
    ]
    stack/with-escape
  ]
  if
;

# amount providing-cursor cursor
: ~cursor/write-from-cursor swap ~cursor/read-into-cursor ;

# cursor -> position err
: ~cursor/tell  dup ~cursor/Cursor//definition.get ~cursor/CursorDefinition//tell.call  ;

# position cursor -> err
: ~cursor/seek  dup ~cursor/Cursor//definition.get ~cursor/CursorDefinition//seek.call  ;

# cursor -> <>
: ~cursor/close dup ~cursor/Cursor//definition.get ~cursor/CursorDefinition//close.call ;

# extensions

# uses tell to check if the seek actually made it where it was going
# position cursor -> arrived err
: ~cursor/seek-and-check
  { -- $cursor $position } $cursor.set $position.set
  [ { -- $escape } $escape.set
    $position.get $cursor.get ~cursor/seek
    dup [ 0 swap $escape.call ] when
    pop
    $cursor.get ~cursor/tell
    dup [ $escape.call ] when
    pop
    $position.get == 0
  ] stack/with-escape
;  

# cursor -> u64 err
: ~cursor/u64 ~cursor/Cursor//definition.get "u64 stuff" panic ;

# cursor/u32 -> u32 err
: ~cursor/u32 ~cursor/Cursor//definition.get "u32 stuff" panic ;
