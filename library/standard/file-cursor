
% file-cursor/FileCursor (@rc @st)
  @ @rc @st (
    (definition type/pointer)
    (name   type/u64)
    (fd     type/u32)
    (closed type/u32)
  );
;

@ struct/define file-cursor/FileCursor ;

:file-cursor/use-existing-fd                                1 ;
:file-cursor/create-new-file                                2 ;
:file-cursor/open-existing-file                             3 ;
:file-cursor/create-new-or-open-existing-file               4 ;
:file-cursor/create-new-file-for-appending                  5 ;
:file-cursor/open-existing-file-for-reading                 6 ;
:file-cursor/open-existing-file-for-appending               7 ;
:file-cursor/create-new-or-open-existing-file-for-appending 8 ;

#[: todo
#[: (cursors todo)
#
:file-cursor/with-file-cursors
  { $todo-with-file-cursors }
  
  [ { $definition }
    
    &file-cursor/-read  $definition.get ~cursor/CursorDefinition//read.set
    &file-cursor/-write $definition.get ~cursor/CursorDefinition//write.set
    &file-cursor/-tell  $definition.get ~cursor/CursorDefinition//tell.set
    &file-cursor/-seek  $definition.get ~cursor/CursorDefinition//seek.set
    &file-cursor/-start $definition.get ~cursor/CursorDefinition//start.set
    &file-cursor/-end   $definition.get ~cursor/CursorDefinition//end.set
    &file-cursor/-close $definition.get ~cursor/CursorDefinition//close.set

    #[: fd open-method==use-existing-fd todo
    #[:   or
    #[: path open-method==other todo
    #[: 
    #[: (todo $file-cursor err)
    #
    [      
      {
        $path-or-fd $open-method $todo-with-file-cursor
        --
        $name $fd $fd-err
        $prepare-cursor-and-call-todo
      }
      
      [
        $fd-err.get
        [
          0 $fd-err.get $todo-with-file-cursor.call
        ]
        [
          file-cursor/FileCursor.size
          [ { $cursor }
            $definition.get $cursor.get file-cursor/FileCursor//definition.set
            $fd.get $cursor.get file-cursor/FileCursor//fd.set
            0 $cursor.get file-cursor/FileCursor//closed.set
            $cursor.get 0 $todo-with-file-cursor.call
          ]
          stack/with-stack-buffer
        ]
        if
      ]
      $prepare-cursor-and-call-todo.set
      
      [
        {
          $escape
        }
        
        -1 $fd.set
        0  $fd-err.set
        
        $open-method.get file-cursor/use-existing-fd ==
        [
          $fd.get
          [ { $sfd }
            
            $sfd.get $name.set
            0 $fd-err.set
            $path-or-fd.get $fd.set
            
            $prepare-cursor-and-call-todo.call
            $escape.call
          ]
          strings/with-unsigned-as-string
        ]
        when
        
        $open-method.get file-cursor/create-new-file ==
        [
          $path-or-fd.get
          syscall/open/opt/create syscall/open/opt/exclusive or syscall/open/opt/readwrite or
          syscall/open/mode/standard-file
          syscall/open
          
          $path-or-fd.get $name.set
          $fd-err.set
          $fd.set
          
          $prepare-cursor-and-call-todo.call
          $escape.call
        ]
        when
        
        $open-method.get file-cursor/open-existing-file ==
        [
          $path-or-fd.get
          syscall/open/opt/readonly
          syscall/open/mode/standard-file
          syscall/open
          
          $path-or-fd.get $name.set
          $fd-err.set
          $fd.set
          
          $prepare-cursor-and-call-todo.call
          $escape.call
        ]
        when
        
        $open-method.get
        [
          "[file-cursor] unknown open-method: " swap 2 panic-strings
        ]
        strings/with-unsigned-as-string
        
      ]
      stack/with-escape
    ]
    $todo-with-file-cursors.call
  ]
  ~cursor/with-definition
;

# amount buffer cursor -> amount-read err
:file-cursor/-read
  dup file-cursor/FileCursor//closed.get
  [
    pop pop pop 0 "file is closed"
  ]
  [
    file-cursor/FileCursor//fd.get
    syscall/read
  ]
  if
;

# amount buffer cursor -> amount-written err
:file-cursor/-write
  dup file-cursor/FileCursor//closed.get
  [
    pop pop pop 0 "file is closed"
  ]
  [
    file-cursor/FileCursor//fd.get
    syscall/write
  ]
  if
;

# cursor -> position err
:file-cursor/-tell
  dup file-cursor/FileCursor//closed.get
  [
    pop 0 "file is closed"
  ]
  [
    file-cursor/FileCursor//fd.get
    0 swap
    syscall/lseek/relative-to-current
    swap
    syscall/lseek
  ]
  if
;

# position cursor -> err
:file-cursor/-seek
  dup file-cursor/FileCursor//closed.get
  [
    pop pop "file is closed"
  ]
  [
    file-cursor/FileCursor//fd.get
    syscall/lseek/relative-to-start
    swap
    syscall/lseek
    swap pop
  ]
  if
;

# cursor -> err
:file-cursor/-start
  dup file-cursor/FileCursor//closed.get
  [
    pop "file is closed"
  ]
  [
    0 swap file-cursor/-seek
  ]
  if
;

# cursor -> err
:file-cursor/-end
  dup file-cursor/FileCursor//closed.get
  [
    pop "file is closed"
  ]
  [
    file-cursor/FileCursor//fd.get
    0
    swap
    syscall/lseek/relative-to-end
    swap
    syscall/lseek
    swap pop
  ]
  if
;

# cursor -> <>
:file-cursor/-close
  { $cursor }
  $cursor.get file-cursor/FileCursor//closed.get
  [
    # multiple closes are idempotent
  ]
  [ 
    1 $cursor.get file-cursor/FileCursor//closed.set
    $cursor.get file-cursor/FileCursor//fd.get
    syscall/close
    dup
    [
      [ { $serr }
        "[WARNING] unexpected error closing file '"
        $cursor.get file-cursor/FileCursor//name.get
        "': "
        $serr.get
        4
        log-strings
      ]
      errno/with-errno-string
    ]
    [
      pop
    ]
    if
  ]
  if
;
