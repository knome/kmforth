
# 
# simple commands interface
# 

# [: filename
# [: fd err
# 
:create-new-file
  syscall/open/opt/readwrite syscall/open/opt/create or
  syscall/open/opt/exclusive or
  syscall/open/mode/standard-file
  syscall/open
;

# [: filename
# [: fd err
# 
:create-new-private-file
  syscall/open/opt/readwrite syscall/open/opt/create or
  syscall/open/opt/exclusive or
  syscall/open/mode/owner/readwrite
  syscall/open
;

# [: filename
# [: fd err
# 
:open-existing-file
  syscall/open/opt/readwrite
  syscall/open/mode/standard-file
  syscall/open
;

# [: fd
# [: err
# 
:close
  syscall/close
  swap pop
;

# [: "string"
# [: err
# 
:write 1 syscall/STDOUT write-strings ;

# print a string or die on failure
# 
# [: "string"
# [: -
# 
:print "\n" 2 syscall/STDOUT write-strings [ 200 exit ] $.callIf ;

# print a number or die on failure
# 
# [: number
# [: -
# 
:printno
  strings/number-buffer.size 
  [
                              # [: value buffer=(number-buffer (tmp, on callstack))
    strings/unsigned-to-ascii # [: <string-pointer>
    print                     # [:
  ]
  stack/with-stack-buffer
;

# an err can be a system errno or a string
# this determines it and looks it up, printing whatever
# 
# [: err
# 
:printerr
  &print errno/with-errno-string
;

# [: "string"
# [:
# 
:log "\n" 2 syscall/STDERR write-strings [ 203 exit ] $.callIf ;

# does not return
# 
# [: "string"
# n/a
# 
:panic log 1 exit ;

# ss... n
:panic-strings "\n" swap incr syscall/STDERR write-strings pop 1 exit ;

# does not return
# 
# [: exitcode
# n/a
# 
:exit syscall/exit ;

# output ordering is FIFO, not stack-backwards
# [: "hello" ", " "there" 3 write-strings --> "hello, there"
# 
#[: string... numstrings fd
#[: err
#
:write-strings
  {
    --
    $n $fd
  }

  $fd.set

  # if there are no strings, don't bother
  # 
  dup 0 ==                     #[: n=0 1 | ss=strings... n=1+ 0
  $.leaveIf                    #[: <> 0 | ss... n
  
  $n.copy                      #[: ss... n
  
  # determine the size of the
  # stack-buffer we need for
  # the iovec array
  # 
  syscall/iovec.size *         #[: ss... <iovec-array-size>
  
  [
    { -- $escape }
    
    $escape.set
    
    [
      {
        --
        $iovecs
        $total
      }
      
      #                          ##[: ss... <buffer>
      $iovecs.set                ##[: ss...
      0 $total.set               ##[: ss...
      
      # write the strings on the stack
      # into our iovec array from back
      # to front
      #
      $n.get                     ##[: ss... n
      [
        { -- $iovec }
        #                        ###[: ss... <index>
        $n.get swap - decr       ###[: ss... <reversed-index>
        syscall/iovec.size *     ###[: ss... <nth-iovec-offset>
        $iovecs.get +            ###[: ss... <nth-iovec>
        $iovec.set               ###[: ss... 
        dup                      ###[: ss... <s> <s>
        strings/length           ###[: ss... <s> <s-len>
        dup [+] $total.update    ###[: ss... <s> <s-len>
        $iovec.get               ###[: ss... <s> <s-len> <nth-iovec>
        syscall/iovec//len.set   ###[: ss... <s>
        $iovec.get               ###[: ss... <s> <iovec>
        syscall/iovec//base.set  ###[: ss...
      ]                          ##[: ss... n <todo>
      for-range                  ##[: 
      
      # loop
      #   write it
      #     on error fix up the stack and escape
      #     on remaining fix up the iovecs and continue
      #     on complete fix up the stack and escape
      #
      [
        $fd.get                                 ###[: fd
        $iovecs.get                             ###[: fd iovecs
        $n.get                                  ###[: fd iovecs num-iovecs
        syscall/writev                          ###[: written err
        
        dup 0 !=                                ###[: written err <err!=0>
        [                                       
          "we need to update the iovecs" panic  ####[: written err
          swap pop $escape.get call             ####[: <> err
        ]
        when                                    ###[: written <err=0>
        
        # update the total remaining
        # and keep a copy of it
        #
        pop                                     ###[: written
        dup [swap - dup] $total.update          ###[: written <total-remaining>
        
        # if there is 0 total remaining
        # don't bother updating the iovecs
        # just leave
        # 
        0 ==                                    ###[: written <tr==0>
        [
           pop 0 $escape.get call               ####[: <> 0
        ]
        when                                    ###[: written
        
        # while written > next iovec
        # sub its value from written and remove it
        # 
        [ dup $iovecs.get syscall/iovec//len.get is-bigger-than ]
        [
          #                                     ####[: written
          $iovecs.get syscall/iovec//len.get -  ####[: written=<written - amount in current iovec len>
          [syscall/iovec.size +] $iovecs.update ####[: written  # (we move iovec ahead one entry
          [1 -] $n.update                       ####[: written  # (we decrease the count of iovecs by one
        ]
        while
        
        # if there is any written remaining,
        # sub it from the next iovec before looping
        #
        dup 0 is-bigger-than
        [
          [-] $iovecs.get syscall/iovec//len.update ####[: (empty) # we consume the rest of written updating current iovec/len
        ]
        when
      ]
      loop
    ]                            #[: ss... <iovec-array-size> <todo-with-stack-iovec>
    stack/with-stack-buffer #[: err <>
  ] stack/with-escape
  
;
