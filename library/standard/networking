
# an actual bigendian system will require us to fire at an offset into the qword to hit the right spot
# probably move this into a system module and make it architecture dependent when we can
# maybe all this should be in memory/ instead of network/
# 
% network/with-if-local-endianness-is-little ( @rc @st )
  @ @rc @st 1 ;
;

% network/-foreach-endian-size (@entry.each)
  @ network/with-if-local-endianness-is-little network/-for-endian-size @entry ;
;

% network/-for-endian-size ((@sigil @mnemonic) @localIsLittle)
  :network/local-to-network-@mnemonic
    @(
      (@localIsLittle)
      (@little.expandIf)
      ` bswap @mnemonic@ [r14-8] `
    )
    @(
      (@localIsLittle)
      (@big.expandIfNot)
      # this space intentionally left blank
    )
  ;
  
  :network/network-to-local-@mnemonic
    @(
      (@localIsLittle)
      (@little.expandIf)
      ` bswap @mnemonic@ [r14-8] `
    )
    @(
      (@localIsLittle)
      (@big.expandIfNot)
      # this space intentionally left blank
    )
  ;
  
  :network/little-to-bigendian-@mnemonic
      ` bswap @mnemonic@ [r14-8] `
  ;
  
  :network/big-to-littleendian-@mnemonic
      ` bswap @mnemonic@ [r14-8] `
  ;
;

@ network/-foreach-endian-size (
    (q qword)
    (d dword)
    (w word)
    # no point in swapping a byte
);


# #[: string-address
# #[: u32 0 | 0 err
# : network/ip4-address-to-u32 { -- $t }
#   
#   0 $t.set                                                   #[: s
#   
#   dup strings/startswith-digit not                           #[: s isdigit=(!s[0].startswith(0..9))
#   dup                                    ff                  #[: s isdigit isdigit
#   [ pop 0 "value does not start with a number" 1 ] $.callIf  #[: 0 err 1 | s isdigit
#   $.leaveIf                                                  #[: 0 err <> | s
#   
#   conv/string-to-integer-and-rest                            #[: n rest
#   swap [+] $t.update                                         #[: rest
#   
#   dup memory/peek-b strings/ascii-dot ==                     #[: rest isdot=(rest[0]=='.')
#   dup                                                        #[: rest isdot isdot
#   [ pop 0 "missing first '.' in ipv4 address" ] $
# ;


#[: string
#[: number
: conv/string-to-integer { $s -- $loop }
  #                             #[: string
  0                             #[: total
  $loop.here
  $s.get memory/peek-b dup dup             #[: total byte byte byte
  strings/ascii-zero is-smaller-than swap  #[: total byte (byte<"0") byte
  strings/ascii-nine is-bigger-than or dup #[: total byte ((byte<"0")||(byte>"9")) ((byte<"0")||(byte>"9"))
  [ pop pop 1 ] $.callIf                   #[: total 1 | total byte (((byte<"0")||(byte>"9"))=0)
  $.leaveIf                                #[: <> total | total byte
  strings/ascii-zero -                     #[: total (byte-"0")
  swap 10 * +                              #[: total=(total*10+(byte-"0"))
  $s.incr
  $loop.jump
;

#[: string
#[: number
: conv/string-to-integer-and-rest
  { -- $loop }
  #                            #[: string
  0                            #[: string total
  $loop.here
  1 nth memory/peek-b dup dup               #[: string total byte byte byte
  strings/ascii-zero is-smaller-than swap   #[: string total byte (byte<"0") byte
  strings/ascii-nine is-bigger-than or dup  #[: string total byte ((byte<"0")||(byte>"9")) ((byte<"0")||(byte>"9"))
  [ pop pop 1 ] $.callIf                    #[: string total 1 | string total byte (((byte<"0")||(byte>"9"))=0)
  $.leaveIf                                 #[: <> string total | string total byte
  strings/ascii-zero -                      #[: string total (byte-"0")
  swap 10 * +                               #[: string total=(total*10+(byte-"0"))
  swap 1 + swap                             #[: (string+1) total
  $loop.jump
;
