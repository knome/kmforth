
# 
# stack manipulation functions
# 

:dup { $a }
  $a.get
  $a.get
;

# push the nth stack item
# 0 is the first element on the stack, ignoring <index>
# 
# [: index
# [: <nth-item>
:nth
  `
  mov rax,[r14-8]  ; index
  shl rax,3        ; (index*8)
  neg rax          ; (-(index*8))
  add rax,r14      ; <addr of desired item on stack>
  mov rbx,[rax-16] ; copy item (16 down to ignore stack & drop below first element so 0 = top)
  mov [r14-8],rbx  ; put on top of stack replacing index
  `
;

# push the address of the nth stack item
# 0 is the first element on the stack, ignoring <index>
# 
# [: index
# [: <nth-item-addr>
:nth-addr
  `
  mov rax,[r14-8] ; index
  add rax,2       ; (offset for top-of-stack and drop below first element)
  shl rax,3       ; index*8
  neg rax         ; -(index*8)
  add rax,r14     ; addr
  mov [r14-8],rax ; push to top of stack
  `
;

# busted, look into it later
# 
# #[: index
# #[: 
# :nth-incr
#   `
#   mov rax,[r14-8]     ; index
#   add rax,2           ; (offset for top-of-stack and drop below first element)
#   shl rax,3           ; index*8
#   neg rax             ; -(index*8)
#   add rax,r14         ; addr
#   add qword [rax],1
#   `
# ;
# 
# #[: index
# #[: 
# :nth-decr
#   `
#   mov rax,[r14-8]     ; index
#   add rax,2           ; (offset for top-of-stack and drop below first element)
#   shl rax,3           ; index*8
#   neg rax             ; -(index*8)
#   add rax,r14         ; addr
#   sub qword [rax],1
#   `
# ;

:stack/callstack-depth
  `
  mov rax, r15          ; copy current callstack location
  sub rax, [callstack]  ; fetch bottom of callstack (saved during startup)
  shr rax, 3            ; divide by callstack entry size (8)
  mov qword [r14], rax  ; stuff it on the datastack
  add r14,8             ; bump the datastack height
  `
;

# fetch the address of the top item on the stack
# (remember that datastack points to the next empty slot, so we have to step back)
:stack/datastack-addr
  `
  mov rax, r14   ; get address of next data slot
  sub rax, 8     ; step back to get the current top data slot
  mov [r14], rax ; push that into the next data slot
  add r14, 8     ; bump r14 to the next next data slot, since we just filled the previous one
  `
;

:stack/datastack-depth
  `
  mov rax, r14          ; copy current callstack location
  sub rax, [datastack]  ; fetch bottom of callstack (saved during startup)
  shr rax, 3            ; divide by callstack entry size (8)
  mov qword [r14], rax  ; stuff it on the datastack
  add r14,8             ; bump the datastack height
  `
;

# the following two functions are exclusively for malicious usage

# grabs a pointer to where the callstack of the caller ends
# 
:stack/callstack.get
  `
  mov qword [r14], r15 ; grab the pointer to where the callstack ends in this function
  sub qword [r14], 8   ; walk it back to where it ends in the caller
  add r14, 8           ; bump the datastack to complete adding the pointer to it
  `
;

# restore the callstack to point at a prior grabbed location
# manually return to the one requesting the callstack change since moving the callstack
# breaks the normal return semantics
# 
:stack/callstack.set
  `
  mov rax, [r15-8] ; since we're nuking the callstack, we have to manually return to the caller
  sub r14, 8       ; set the value of the current callstack
  mov r15, [r14]   ;
  jmp rax          ; avoid the normal "sub [r15],8; jmp [r15]" at the end of the function
  `
;


# if we also add a stack/datastack.{get,set}, we can use the combination with callstack.{get,set}
# to create a far-return/exception-like capability


# todo
# (calls '&escapefn todo')
# (
#   calling 'escapefn' within 'todo' immediately reverts the callstack
#   back to where it was when with-escape was entered and then exits
#   from with-escape. the consistency of the datastack is the responsibility
#   of the person foolish enough to use this mechanism.
# )
# 
:stack/with-escape 
  {
    $todo
    --
    $escapefn
    $callstack
    $return
    $call
  }
  
  $.noopt
  
  stack/callstack.get $callstack.set
  
  # the 'escape' function
  [
      # restore the previous callstack
      # jump directly from wherever we are back there
      # lmao
      $return.get # grab this first because setting the callstack nukes variables
      $callstack.get stack/callstack.set
      $.jump
  ]
  $escapefn.set
  
  1 $call.set
  
  $return.here
  
  # call the todo the first time, but not on return
  # 
  $call.get
  0 $call.set
  [ $escapefn.get $todo.get call ]
  when
;

:call
  $.call
  ;

# [: size todo
# <calls: buffer todo>
# [: <whatever-todo-did>
:stack/with-stack-buffer
  swap
  dup 8 %              # [: todo size <is-size-not-modulo-8>
  [
    dup    # [: todo size size
    8 %    # [: todo size <size%8>
    8 swap # [: todo size 8 <size%8>
    -      # [: todo size <size-size%8>
    +      # [: todo <size+(size-size%8)>
  ]                    # [: todo size <is-size-not-modulo-8> <fixer-upper>
  $.callIf             # [: todo size | todo <size-adjusted-if-not-modulo-8>
  `
  mov rax,r15            ; save current end of r15 (slot after return-addr)
  sub r14,8
  add r15,[r14]          ; bump the callstack by sizeof(buffer), popping the size off the datastack
  add r15,16             ; bump callstack by 16
                         ;   8 for saving previous callstack location
                         ;   8 for return-address
  mov qword [r15-16],rax ; save the previous callstack end after the buffer 
  mov qword [r15-8],.rt  ; save the return address to the callstack
  mov rbx, [r14-8]       ; grab the 'todo' without popping the datastack
  mov qword [r14-8],rax  ; replace it with the saved (slot-after-return-addr), which is where our buffer is
  jmp rbx                ; goto whatever 'todo' is
  .rt:                   ; 'todo' returns here
  mov r15,[r15-8]        ; use the saved previous-callstack to reset the callstack to wherever it is supposed to be
                         ; explode or get hacked because of buffer overflow nuking the saved callstack restore value
  `
;

#[: size todo
:stack/with-zeroed-stack-buffer
  { $size $todo }
  $size.get
  [ { $buffer }
    $size.get 0 $buffer.get memory/memset
    
    $buffer.get $todo.call
  ]
  stack/with-stack-buffer
;

:decr `dec qword [r14-8]` ;
:incr `inc qword [r14-8]` ;

:swap
  { $a $b }
  $b.get
  $a.get
;

:pop ` sub r14, 8 ` ;

:not
  `
  mov rax,[r14-8] ; grab the top of the stack
  test rax,rax    ; test against itself to set zf
  mov rax,0       ; 0 the register ( does not change flags )
  setz al         ; copy zf into the low bits of the register
  mov [r14-8],rax ; copy the register back to the top of the stack
  `
;

# this one is a bit complex, but will hopefully allow us to avoid deeply
# nested structures for complex resource requirements
# 
# <nestables>...? <num-nestables> <combined-todo>
# 
# where a <nestable> is fn(*,<nesting-todo>) -> (calls: <result> <err> <nesting-todo>)
# 
# this function handles threading the stack of contexts together
# so the user doesn't have to write out horrible deep contexts
# 
# this will run each nestable in reverse order
# if any has an error, it will push <num-nestables> 0s to the stack and then that error before calling todo
# if all are successes, it pushes all of their values from first to last to the stack and then a 0 for the error
# 
# eg
# 
#     [ { $t } "path/hello" $t.get io/with-existing-file ]
#     [ { $t } "path/world" $t.get io/with-existing-file ]
#     2
#     [
#       { $f1 $f2 }
#       
#       ... do stuff ...
#       
#     ]
#     stack/with-unnested
# 
# would run the opener for "path/world", then "path/hello", then call <do stuff> with $f1=<hello file> $f2=<world file>
# 
:stack/with-nested
  { $numNestings $todo }
  
  $numNestings.get 8 *
  [ {$outputs -- $walker $index}
  
    $numNestings.get $index.set
    
    [
      $index.get $index.decr 0 ==
      [
        $numNestings.get
        [ {$i}
          $outputs.get $i.get 8 * +
          memory/peek-q
        ]
        for-range
        
        0 # no error
        
        $todo.call
      ]
      [
        { $nesting }
        
        [ { $result $err }
        
          $err.get
          [
            # there was an error!
            # just push zeros and then the error and call the todo
            
            $numNestings.get [0] repeat
            $err.get
            $todo.call
          ]
          [
            $result.get $outputs.get $index.get 8 * +
            memory/poke-q
            $walker.call
          ]
          if
        ]
        $nesting.call
      ]
      if
    ]
    $walker.set
    
    $walker.call
  ]
  stack/with-stack-buffer
;
