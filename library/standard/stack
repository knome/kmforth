
# 
# stack manipulation functions
# 

:dup { $a }
  $a.set
  $a.get
  $a.get
;

# push the nth stack item
# 0 is the first element on the stack, ignoring <index>
# 
# [: index
# [: <nth-item>
:nth
  `
  mov rax,[r14-8]  ; index
  shl rax,3        ; (index*8)
  neg rax          ; (-(index*8))
  add rax,r14      ; <addr of desired item on stack>
  mov rbx,[rax-16] ; copy item (16 down to ignore stack & drop below first element so 0 = top)
  mov [r14-8],rbx  ; put on top of stack replacing index
  `
;

# push the address of the nth stack item
# 0 is the first element on the stack, ignoring <index>
# 
# [: index
# [: <nth-item-addr>
:nth-addr
  `
  mov rax,[r14-8] ; index
  add rax,2       ; (offset for top-of-stack and drop below first element)
  shl rax,3       ; index*8
  neg rax         ; -(index*8)
  add rax,r14     ; addr
  mov [r14-8],rax ; push to top of stack
  `
;

# busted, look into it later
# 
# #[: index
# #[: 
# :nth-incr
#   `
#   mov rax,[r14-8]     ; index
#   add rax,2           ; (offset for top-of-stack and drop below first element)
#   shl rax,3           ; index*8
#   neg rax             ; -(index*8)
#   add rax,r14         ; addr
#   add qword [rax],1
#   `
# ;
# 
# #[: index
# #[: 
# :nth-decr
#   `
#   mov rax,[r14-8]     ; index
#   add rax,2           ; (offset for top-of-stack and drop below first element)
#   shl rax,3           ; index*8
#   neg rax             ; -(index*8)
#   add rax,r14         ; addr
#   sub qword [rax],1
#   `
# ;

:stack/callstack-depth
  `
  mov rax, r15          ; copy current callstack location
  sub rax, [callstack]  ; fetch bottom of callstack (saved during startup)
  shr rax, 3            ; divide by callstack entry size (8)
  mov qword [r14], rax  ; stuff it on the datastack
  add r14,8             ; bump the datastack height
  `
;

:stack/datastack-depth
  `
  mov rax, r14          ; copy current callstack location
  sub rax, [datastack]  ; fetch bottom of callstack (saved during startup)
  shr rax, 3            ; divide by callstack entry size (8)
  mov qword [r14], rax  ; stuff it on the datastack
  add r14,8             ; bump the datastack height
  `
;

:call
  $.call
  ;

# [: todo size
# <calls: buffer todo>
# [: <whatever-todo-did>
:stack/call-with-stack-buffer
  dup 8 %              # [: todo size <is-size-not-modulo-8>
  [
    dup    # [: todo size size
    8 %    # [: todo size <size%8>
    8 swap # [: todo size 8 <size%8>
    -      # [: todo size <size-size%8>
    +      # [: todo <size+(size-size%8)>
  ]                    # [: todo size <is-size-not-modulo-8> <fixer-upper>
  $.callIf             # [: todo size | todo <size-adjusted-if-not-modulo-8>
  `
  mov rax,r15            ; save current end of r15 (slot after return-addr)
  sub r14,8
  add r15,[r14]          ; bump the callstack by sizeof(buffer), popping the size off the datastack
  add r15,16             ; bump callstack by 16
                         ;   8 for saving previous callstack location
                         ;   8 for return-address
  mov qword [r15-16],rax ; save the previous callstack end after the buffer 
  mov qword [r15-8],.rt  ; save the return address to the callstack
  mov rbx, [r14-8]       ; grab the 'todo' without popping the datastack
  mov qword [r14-8],rax  ; replace it with the saved (slot-after-return-addr), which is where our buffer is
  jmp rbx                ; goto whatever 'todo' is
  .rt:                   ; 'todo' returns here
  mov r15,[r15-8]        ; use the saved previous-callstack to reset the callstack to wherever it is supposed to be
                         ; explode or get hacked because of buffer overflow nuking the saved callstack restore value
  `
;

:decr `dec qword [r14-8]` ;
:incr `inc qword [r14-8]` ;

:swap { $a $b }
  $a.set
  $b.set
  $a.get
  $b.get
;

:pop ` sub r14, 8 ` ;

:not
  `
  mov rax,[r14-8] ; grab the top of the stack
  test rax,rax    ; test against itself to set zf
  mov rax,0       ; 0 the register ( does not change flags )
  setz al         ; copy zf into the low bits of the register
  mov [r14-8],rax ; copy the register back to the top of the stack
  `
;
