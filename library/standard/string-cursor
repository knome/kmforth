
% string-cursor/StringCursor (@rc @st)
  @ @rc @st (
    (definition type/pointer)
    (string     type/pointer)
    (position   type/u64)
  );
;

@ struct/define string-cursor/StringCursor ;

# [: todo
# [: (cursors todo)
:string-cursor/with-string-cursors
  { $todo-with-string-cursors }
  
  # sets up an indirection structure for use with string cursors
  [
    { $string-cursor-definition }
    
    &string-cursor/-read  $string-cursor-definition.get ~cursor/CursorDefinition//read.set
    &string-cursor/-write $string-cursor-definition.get ~cursor/CursorDefinition//write.set
    &string-cursor/-tell  $string-cursor-definition.get ~cursor/CursorDefinition//tell.set
    &string-cursor/-seek  $string-cursor-definition.get ~cursor/CursorDefinition//seek.set
    &string-cursor/-start $string-cursor-definition.get ~cursor/CursorDefinition//start.set
    &string-cursor/-close $string-cursor-definition.get ~cursor/CursorDefinition//close.set
    &string-cursor/-flush $string-cursor-definition.get ~cursor/CursorDefinition//flush.set
    
    # define new string cursor function
    # 
    # [: string todo
    # 
    [ { $todo-with-cursor }
      
      string-cursor/StringCursor.size
      [
        { $cursor }
        
        $string-cursor-definition.get $cursor.get string-cursor/StringCursor//definition.set
        $cursor.get string-cursor/StringCursor//string.set
        0 $cursor.get string-cursor/StringCursor//position.set
        
        $cursor.get $todo-with-cursor.call
      ]
      stack/with-stack-buffer
    ]
    
    # this receives the $with-string-cursor function
    $todo-with-string-cursors.call
  ]
  ~cursor/with-definition
;

# amount buffer cursor -> amount-read err
:string-cursor/-read
  { $amount $buffer $cursor }
  
  [ { $escape -- $actual-read $final-position $initial-position }
    
    $escape.set
    
    $cursor.get string-cursor/StringCursor//position.get $initial-position.set
    
    $amount.get $initial-position.get + $cursor.get string-cursor/-seek
    
    dup
    [
      0 swap $escape.call
    ]
    when
    pop
    
    $cursor.get string-cursor/StringCursor//position.get $final-position.set
    
    $final-position.get $initial-position.get - $actual-read.set
    
    $buffer.get
    $cursor.get string-cursor/StringCursor//string.get $initial-position.get +
    $actual-read.get
    memory/memmove
    
    $actual-read.get 0
  ]
  stack/with-escape
;

# amount buffer cursor
:string-cursor/-write pop pop pop "string-cursor is not writable" ;

# cursor -> position err
:string-cursor/-tell string-cursor/StringCursor//position.get 0 ;

# position cursor -> err
:string-cursor/-seek
  { $position $cursor }
  
  $cursor.get string-cursor/StringCursor//position.get
  $position.get
  is-bigger-than-or-equal-to
  [
    # if the current position is >= the requested one, we can just without scanning
    
    $position.get $cursor.get string-cursor/StringCursor//position.set
    
    # string-cursor seek never errs
    0
  ]
  [
    # otherwise, we need to scan forward so if we run into the end of the string, we can stop early
    
    { -- $p $s }
    
    $cursor.get string-cursor/StringCursor//position.get $p.set
    $cursor.get string-cursor/StringCursor//string.get $s.set
    
    [
      { $escape }
      
      $position.get $p.get -
      [
        $s.get memory/peek-b
        [
          $s.incr
          $p.incr
        ]
        [
          # we've reached the end of the string, stop advancing
          $escape.call
        ]
        if
      ]
      repeat
    ]
    stack/with-escape
    
    $p.get $cursor.get string-cursor/StringCursor//position.set
    
    # string-cursor seek never errs
    0
  ]
  if
;

:string-cursor/-start "string-cursor/-start unimplemented" ;

:string-cursor/-end "string-cursor/-end unimplemented" ;

# as strings don't really close, just ignore any requests to
:string-cursor/-close pop ;

:string-cursor/-flush pop "string-cursor is not writable, and therefore not flushable" ;
