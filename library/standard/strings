
# a buffer specifically large enough to convert a number into a string
# 
% strings/number-buffer (@rc @st)
  @ @rc @st (
    (bytes type/u8 24) # we only need 21 (including newline), but this makes it align nicely with the 8byte per entry stack
  );
;
@ struct/define strings/number-buffer ;

# [: value number-buffer
# [: <pointer-to-start-of-string-in-buffer>
:strings/unsigned-to-ascii { $number-buffer -- $offset $loop }
  
  strings/number-buffer//bytes.last-index     # [: value <last-index>
  $offset.set                                 # [: value
  
  # write a nul into the last byte of the number buffer
  # 
  strings/ascii-nul $offset.get $number-buffer.get # [: value nul offset buffer
  strings/number-buffer//bytes.nth.set             # [: value
  
  # back up one step to start writing ascii numbers
  $offset.decr                                # [: value
  
  # while there is value left, write a character and back up a step
  [
    dup 10 % strings/ascii-zero +             #[: value <ascii-digit>
    $offset.get $number-buffer.get            #[: value <ascii-digit> offset buffer
    strings/number-buffer//bytes.nth.set      #[: value
    10 /                                      #[: (value/10)
    $offset.decr                              #[: (value/10) # step back a step
  ]
  [ dup 0 is-bigger-than ]
  until
  
  pop
  
  $offset.incr
  $offset.get $number-buffer.get
  strings/number-buffer//bytes.nth.addr
;

#[: value todo -> (value-as-string todo)
#
:strings/with-unsigned-as-string
  { $todo }
  
  strings/number-buffer.size
  [
    strings/unsigned-to-ascii $todo.call
  ]
  stack/with-stack-buffer
;

# length of string NOT including \0
:strings/length
  `
  sub r14, 8             ; pop the pointer to the string
  mov rax, [r14]         ; 
  mov rbx, 0             ; we'll track the length here
  
 .next:
  mov ch, byte [rax+rbx] ; grab the next character in the string
  test ch, ch            ; see if it is 0
  jz .done               ; if its nul, we're at the end, jump
  inc rbx                ; otherwise bump our counter
  jmp .next              ; and loop
 .done:
  mov [r14], rbx         ; push the string length onto the stack
  add r14, 8             ; 
  `
;

# we might be able to drop a buffer onto the data-stack
# and count the strings into that, then dropping the lot
# of it on our way out, to avoid having to double count
# these things while creating the call-stack buffer with
# the full string in it
# 
# ss... num-strings todo
# 
:strings/with-strings-as-string
  { $n $todo -- $total }
  0 $total.set
  
  $n.get [ nth strings/length [+] $total.update ] for-range
  $total.incr
  $total.get
  [ {$buffer -- $b}
    $buffer.get $total.get + $b.set
    $b.decr
    $n.get
    [
      dup strings/length [swap -] $b.update
      $b.get strings/strcpy pop
    ]
    repeat
    0 $buffer.get $total.get + 1 - memory/poke-b
    $buffer.get $todo.call
  ]
  stack/with-stack-buffer
;

# the onus of ensuring the destination has sufficient state is on the caller
# src dst -> number-copied
# 
:strings/strcpy
  { $src $dst -- $n }
  0 $n.set
  [
    $src.get memory/peek-b dup
    $src.incr
  ]
  [
    $dst.get memory/poke-b
    $dst.incr
    $n.incr
  ]
  while
  pop
  $n.get
;

% strings/-define-ascii (@bit.each)
  @ strings/-define-ascii-bit @bit ;
;

% strings/-define-ascii-bit ((@name @value))
  :strings/ascii-@name @value ;
;

@ strings/-define-ascii (
  (nul     0)
  (bel     7)
  (lf     10) (line-feed 10) (nl 10) (newline 10)
  (cr     13) (carriage-return 13)
  (esc    27) (escape 27)
  (space  32)
  (dot    46) (period 46) (. 46)
  (A      64)
  (Z      90)
  (zero   48)
  (one    49)
  (two    50)
  (three  51)
  (four   52)
  (five   53)
  (six    54)
  (seven  55)
  (eight  56)
  (nine   57)
  (a      97)
  (z     122)
);

# [: s
# [: <s[0] in {0..9}>
# 
:strings/startswith-digit
  memory/peek-b
  dup
  strings/ascii-zero is-bigger-than-or-equal-to
  swap
  strings/ascii-nine is-smaller-than-or-equal-to
  and
;

#[: string prefix
#[: 0 | 1
#
:strings/startswith
  { $s $p }
  
  [
    { $escape }
    [
      $p.get memory/peek-b 0 == 
      [
        1 $escape.call
      ]
      when
      
      $s.get memory/peek-b 0 ==
      [
        0 $escape.call
      ]
      when
      
      $s.get memory/peek-b
      $p.get memory/peek-b
      ==
      not
      [
        0 $escape.call
      ]
      when
      
      $s.incr
      $p.incr
    ]
    loop
  ]
  stack/with-escape
;

# call with string right-padded with spaces to given size
:strings/with-right-padded-to-length
  { $s $minlength $todo -- $slen $padsize }
  
  $s.get strings/length $slen.copy $minlength.get is-smaller-than
  [ 
     # if length is smaller than minsize, grab a minsize buffer (+nul)
     # on the stack, copy in the string, pad it, and then call todo
     
     $minlength.get $slen.get - $padsize.set
     
     $minlength.get incr # (space for \0)
     [
        { $b }
        $s.get $b.get strings/strcpy
        $b.get $slen.get + # points to \n of copied string
        
        $padsize.get
        [
          dup strings/ascii-space swap memory/poke-b
          incr
        ]
        repeat
        
        strings/ascii-nul swap memory/poke-b # nul terminate the new string
        
        # call the todo with the padded string
        $b.get $todo.call
     ]
     stack/with-stack-buffer
  ]
  [
     # string is already at or past minlength, just call todo with it
     $s.get $todo.call
  ]
  if
;
