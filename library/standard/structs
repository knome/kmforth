
# we might alter this in the future so that the caller defines a macro that accepts a macro to expand
# in order to define the fields, and then calls the defining macro using the name of their field macro.
# the advantage here is that field values would then be generally available as injectable values rather
# than only existing in the expansion of a single macro, which will allow us to arbitrarily manipulate
# them and recursively expand fields.
# 
# % my/type (%m %s)
#   @ %m %s my/type ((field definitions) (go here)) ;
# ;
# 
# @ struct/define my/type ;
# 
# :main my/type//go//subfield//othersubfield.set
# 
# or something like that

#####

:type/u8.size 1             ;
:type/u8.set  memory/poke-b ;
:type/u8.get  memory/peek-b ;
:type/u8.with-repr strings/with-unsigned-as-string ;

:type/u16.size 2             ;
:type/u16.set  memory/poke-w ;
:type/u16.get  memory/peek-w ;
:type/u16.with-repr strings/with-unsigned-as-string ;

:type/u32.size 4 ;
:type/u32.set  memory/poke-d ;
:type/u32.get  memory/peek-d ;
:type/u32.with-repr strings/with-unsigned-as-string ;

:type/u64.size 8 ;
:type/u64.set  memory/poke-q ;
:type/u64.get  memory/peek-q ;
:type/u64.with-repr strings/with-unsigned-as-string ;

:type/pointer.size type/u64.size ;
:type/pointer.set  type/u64.set  ;
:type/pointer.get  type/u64.get  ;
:type/pointer.with-repr strings/with-unsigned-as-string ;

# user defines a macro of form % name (@rc @st) @ @rc @st ( (field type) (field type) (field type count) ...etc... )
# they then call @ struct/define name ; # (rc=recursive-call st=state)
# our macro then calls their macro with its internal bits ready to go
# they could just call it directly, but making them use a macro will let me create recursive structure definitions eventually
# 
% struct/define (@definition)
  @ @definition struct/-with-definition @definition ;
;

# annotate the (name type) and (name type reps) items as (@fn @ft @is-array @items)
# annotate the 2 items ones as (@fn @ft 0 1) # 1 because we use reps*size in the field-addr calculations
# then expand the .set/etc functions for 1 and the .nth.set/etc functions for otherwise
# 
% struct/-with-definition ( @name @fields )
  @ struct/-define
      @name
      (
          @(
              (@fields)
              (@f.each)
              @(
                  (@f)
                  (@fc.count)
                  @(
                      ((@fc 2) @f)
                      (@e.isEqual.if (@fn @ft))
                      (@fn @ft 0 1)
                  )
                  @(
                      ((@fc 3) @f)
                      (@e.isEqual.if (@fn @ft @fr))
                      (@fn @ft 1 @fr)
                  )
              )
          )
      )
  ;
;

% struct/-define (@name @fields)
  @ struct/-with-mapping-window struct/-define-field-accessors @name @fields ;
  
  # struct-level functions
  
  : @name.size 0 @( (@fields) (@f.each) @( (@f) ((@fn @ft @fa @fr)) @ft.size @fr * + ) ) ;
  
  : @name.get
    @name.size 8 is-bigger-than
    [
      # make this a runtime error for now. we'll need to move sizes into the macros to avoid it
      "[@name@.get] structure is too large for .get operation" panic
    ]
    [
      # fields will defer to this as their own .get
      # getting a structure makes a copy of it
      # if you want the addr of a field, use .addr on it
      #                      # [: src
      0 stack/datastack-addr # [: src dst
      swap                   # [: dst src
      @name.size             # [: dst src len
      memory/memmove
    ]
    if
  ;
  
  : @name.set
    @name.size 8 is-bigger-than
    [
      # make this a runtime error for now. we'll need to move sizes into the macros to avoid it
      "[@name@.set] structure is too large for .set operation" panic
    ]
    [
      #                    # [: dst
      stack/datastack-addr # [: dst src
      @name.size           # [: dst src len
      memory/memmove
      pop
    ]
    if
  ;
  
  : @name.with-repr { $todo } "[type:@name@]" $todo.call ;

  # a big wad of overcomplex macro expansion for printing out the current value of some structure
  : @name.print { $structure }
      @(
          (
              # grab the name of the structure so we can stringize it
              @name
              
              # grab the list of fields so we can capture a count
              @fields
          )
          
          (
              # expand the name into a string
              @n.string
              
              # capture the field count
              @fc.count
          )
          
          # print the name of the structure and the opening bracket
          @n print
          "{" print
          
          @(
              (
                  # drop the count and 0 into a macrolist for comparison
                  # allowing us to branch based on whether there are fields or no
                  (@fc 0)
              )
              
              (
                  # only expand this macro if there are 0 fields
                  @e.isEqual.if
              )
                  
              "  (no fields)" print
          )
          
          @(
              (
                  # drop the count and 0 into a macrolist for comparison
                  # allowing us to branch based on whether there are fields or no
                  (@fc 0)
              )
              
              (
                  # this time expand if there are fields
                  @ne.isEqual.not.if
              )
              
              @(
                  (
                      # pass the fields so we can expand out the longest field name
                      @fields
                      
                      # pass it again so we can expand out the longest type-name
                      @fields
                      
                      # pass it again so we can iterate over each contained field
                      @fields
                  )
                  
                  (
                      # calculate max field-name length
                      @maxFieldNameLength.each.first.string.length.collect.sort.reverse.first
                      
                      # calculate max type-name length
                      @maxFieldTypeNameLength.each.rest.first.string.length.collect.sort.reverse.first
                      
                      # iterate over the contained fields
                      # these have already been expanded in the struct/-define to (name type isArray numEntries)
                      @field.each
                  )
                  
                  @(
                      (@field @field @field)
                      (
                          @fieldName.first
                          @fieldNameString.first.string
                          @fieldType.rest.first.string
                      )
                      
                      @fieldNameString
                      @maxFieldNameLength
                      [ { $paddedFieldName }
                      
                        @fieldType
                        @maxFieldTypeNameLength
                        [
                          { $paddedFieldTypeName }
                          
                          # print the value of scalars
                          @(
                              (@field)
                              (@ifFieldIsScalar.rest.rest.first.not.if)
                              
                              @name//@fieldName.size 8 is-bigger-than
                              [
                                  "  " $paddedFieldName.get " (" $paddedFieldTypeName.get ") = (is large structure)" 5 print-strings
                              ]
                              [
                                  $structure.get
                                  [ { $value }
                                    "  " $paddedFieldName.get " (" $paddedFieldTypeName.get ") = " $value.get 6 print-strings
                                  ]
                                  @name//@fieldName.with-repr
                              ]
                              if
                          )
                          
                          # just print out that a value is an array
                          @(
                              (@field @field)
                              (@ifFieldIsArray.rest.rest.first.if @arrayEntries.rest.rest.rest.first.string)
                              
                              "  " $paddedFieldName.get " (" $paddedFieldTypeName.get "[" @arrayEntries "]) = (is-array)" 7 print-strings
                          )
                        ]
                        strings/with-right-padded-to-length
                      ]
                      strings/with-right-padded-to-length
                  )
              )
          )
          
          "}" print
      )
  ;
;

% struct/-define-field-accessors ( @name @before (@fieldName @fieldType @fieldIsArray @fieldRepetitions) @after )
  @ struct/-define-array-accessors  @name @before @fieldName @fieldType @fieldIsArray @fieldRepetitions @after ;
  @ struct/-define-scalar-accessors @name @before @fieldName @fieldType @fieldIsArray @fieldRepetitions @after ;
  
  # common accessors
  
  # [: structaddr
  # [: fieldaddr
  # 
  : @name//@fieldName.addr
    0 @( (@before) (@b.each) @( (@b) ((@fn @ft @fa @fr)) @ft.size @fr * + ) ) +
  ;
  
;

% struct/-define-array-accessors (@name @before @fieldName @fieldType @fieldIsArray.if @fieldRepetitions @after)

  # [:
  # [: <number-of-entries>
  # 
  : @name//@fieldName.entries
    @fieldRepetitions
  ;
  
  # [:
  # [: <last-index>
  : @name//@fieldName.last-index
    @fieldRepetitions 1 -
  ;
  
  # [: index structaddr
  # [: &fieldValue[ index ]
  # 
  : @name//@fieldName.nth.addr
    @name//@fieldName.addr  #[: index fieldaddr
    swap                    #[: fieldaddr index
    @fieldType.size * +     #[: &fieldaddr[ index ]
  ;
  
  # [: index structaddr
  # [: fieldValue
  # 
  : @name//@fieldName.nth.get
    @name//@fieldName.nth.addr # [: &fieldaddr[ index ]
    @fieldType.get             # [: value
  ;
  
  # [: new-value index structaddr 
  # [: 
  # 
  : @name//@fieldName.nth.set
    @name//@fieldName.nth.addr # [: new-value &fieldaddr[ index ]
    @fieldType.set
  ;
;

% struct/-define-scalar-accessors (@name @before @fieldName @fieldType @fieldIsArray.not.if @fieldRepetitions @after)
  
  # [: structure todo
  # [: <calls todo with string representing value of fieldName on stack>
  : @name//@fieldName.with-repr
    { $structure $todo }
    $structure.get @name//@fieldName.get
    $todo.get
    @fieldType.with-repr
  ;
  
  # [: 
  # [: size
  # 
  : @name//@fieldName.size
    @fieldType.size
  ;
  
  # [: structaddr
  # [: fieldvalue
  # 
  : @name//@fieldName.get
    @name//@fieldName.addr
    @fieldType.get
  ;
  
  # [: value structaddr
  # [: 
  # 
  : @name//@fieldName.set
    @name//@fieldName.addr #[: value fieldaddr
    @fieldType.set
  ;
  
  # [: todo structaddr
  # [:
  #
  : @name//@fieldName.update { $todo $structaddr }
    $structaddr.get       #[: structaddr
    @name//@fieldName.get #[: value
    $todo.call            #[: updated-value
    $structaddr.get       #[: updated-value structaddr
    @name//@fieldName.set #[: 
  ;

  # [: structaddr
  # [: 
  : @name//@fieldName.incr
    [ 1 + ] swap @name//@fieldName.update
  ;
  
  # [: structaddr
  # [: 
  : @name//@fieldName.decr
    [ 1 - ] swap @name//@fieldName.update
  ;
  
  # [: structaddr
  #
  : @name//@fieldName.call
    @name//@fieldName.get call
  ;
;

# for
#   @ hello (some state) (1 2 3 4 5)
# expandsTo
#   @ hello (some state) ()        1 (2 3 4 5)
#   @ hello (some state) (1)       2 (3 4 5)
#   @ hello (some state) (1 2)     3 (4 5)
#   @ hello (some state) (1 2 3)   4 (5)
#   @ hello (some state) (1 2 3 4) 5 ()
# 
% struct/-with-mapping-window (@todo @state @list)
  @ struct/-with-mapping-window/ready @todo @state () @list @list ;
;

# % with-mapping-window/ready (hello state (a b c) (d e f))
#   @ hello state (a b c) d (e f) ;
#   @ struct/-with-mapping-window/ready hello state (a b c d) (e f)
# ;
# 
% struct/-with-mapping-window/ready (@todo @state @prev @shouldExpand.isEmpty.not.if @remaining)
  @ @todo @state @prev @( (@remaining) (@rf.first) @rf) @( (@remaining) (@rr.rest) @rr ) ;
  @ struct/-with-mapping-window/ready
    @todo
    @state
    ( @( (@prev) (@p.each) @p ) @( (@remaining) (@rf.first) @rf ) ) 
    @( (@remaining) (@rr.rest) @rr @rr )
  ;
;
