#!/usr/bin/env python3

# everything is a lot easier if I give my callstack a little bit of state

# how to set gdb to step through assembly
# https://stackoverflow.com/questions/2420813/using-gdb-to-single-step-assembly-code-outside-specified-executable-causes-error

import sys
import os
import contextlib
import re

from modules.options             import parse_options
from modules.compilation_manager import CompilationManager
from modules.context             import Context
from modules.parser              import Parser
from modules.code_generation     import generate_code
from modules.abstract_generation import generate_abstract
from modules.abstract_optimizer import optimize_abstract

import modules.constants as constants

def debug( *args, **kwargs ):
    kwargs['file'] = sys.stderr
    print( *args, **kwargs )

def log( *args, **kwargs ):
    kwargs[ 'file' ] = sys.stderr
    print( *args, **kwargs )
    
def panic( *args, **kwargs ):
    log( *args, **kwargs )
    sys.exit(1)

def main():
    options, err = parse_options(sys.argv, defaultImplementation = 'kmforth/python')
    if err:
        panic(err)
    
    context = Context(
        log = log,
    )
    
    parser = Parser(
        options = options ,
        context = context ,
    )
    
    compilationManager = CompilationManager(
        options   = options ,
        context   = context ,
        parser    = parser  ,
    )
    
    fns, usedFns = compilationManager.compile_program(
        targetPath = os.path.normpath( os.path.join( os.getcwd(), options.targetPath )) ,
    )
    
    if options.generate == 'code':
        code = generate_code(
            options             = options                          ,
            functions           = fns                              ,
            usedFunctions       = usedFns                          ,
            startname           = options.startname                ,
            trampolineSize      = int(options.trampolineSize)      ,
            trampolineEndOffset = int(options.trampolineEndOffset) ,
        )
        
        print(code)
    
    elif options.generate == 'abstract':
        abstract = generate_abstract(
            options       = options           ,
            functions     = fns               ,
            usedFunctions = usedFns           ,
            startname     = options.startname ,
        )
        
        
        if options.optimize:
            optimizedAbstract = optimize_abstract(abstract)
            # optimizedAbstract.dump()
        else:
            abstract.dump()
    
    else:
        panic('unknown value for --generate: %s' % repr(options.generate))

#####

if __name__ == '__main__':
    main()
